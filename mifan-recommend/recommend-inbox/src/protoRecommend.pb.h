// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoRecommend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protoRecommend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protoRecommend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protoRecommend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protoRecommend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace mifan {
class noteRecommendAlarm;
class noteRecommendAlarmDefaultTypeInternal;
extern noteRecommendAlarmDefaultTypeInternal _noteRecommendAlarm_default_instance_;
class pullReq;
class pullReqDefaultTypeInternal;
extern pullReqDefaultTypeInternal _pullReq_default_instance_;
class pullRes;
class pullResDefaultTypeInternal;
extern pullResDefaultTypeInternal _pullRes_default_instance_;
class pushReq;
class pushReqDefaultTypeInternal;
extern pushReqDefaultTypeInternal _pushReq_default_instance_;
class pushReq_feedInfo;
class pushReq_feedInfoDefaultTypeInternal;
extern pushReq_feedInfoDefaultTypeInternal _pushReq_feedInfo_default_instance_;
}  // namespace mifan
PROTOBUF_NAMESPACE_OPEN
template<> ::mifan::noteRecommendAlarm* Arena::CreateMaybeMessage<::mifan::noteRecommendAlarm>(Arena*);
template<> ::mifan::pullReq* Arena::CreateMaybeMessage<::mifan::pullReq>(Arena*);
template<> ::mifan::pullRes* Arena::CreateMaybeMessage<::mifan::pullRes>(Arena*);
template<> ::mifan::pushReq* Arena::CreateMaybeMessage<::mifan::pushReq>(Arena*);
template<> ::mifan::pushReq_feedInfo* Arena::CreateMaybeMessage<::mifan::pushReq_feedInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifan {

// ===================================================================

class pullReq :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pullReq) */ {
 public:
  pullReq();
  virtual ~pullReq();

  pullReq(const pullReq& from);
  pullReq(pullReq&& from) noexcept
    : pullReq() {
    *this = ::std::move(from);
  }

  inline pullReq& operator=(const pullReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline pullReq& operator=(pullReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pullReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pullReq* internal_default_instance() {
    return reinterpret_cast<const pullReq*>(
               &_pullReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pullReq* other);
  friend void swap(pullReq& a, pullReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pullReq* New() const final {
    return CreateMaybeMessage<pullReq>(nullptr);
  }

  pullReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pullReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pullReq& from);
  void MergeFrom(const pullReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pullReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pullReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pullReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoRecommend_2eproto;
};
// -------------------------------------------------------------------

class pullRes :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pullRes) */ {
 public:
  pullRes();
  virtual ~pullRes();

  pullRes(const pullRes& from);
  pullRes(pullRes&& from) noexcept
    : pullRes() {
    *this = ::std::move(from);
  }

  inline pullRes& operator=(const pullRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline pullRes& operator=(pullRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pullRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pullRes* internal_default_instance() {
    return reinterpret_cast<const pullRes*>(
               &_pullRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(pullRes* other);
  friend void swap(pullRes& a, pullRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pullRes* New() const final {
    return CreateMaybeMessage<pullRes>(nullptr);
  }

  pullRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pullRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pullRes& from);
  void MergeFrom(const pullRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pullRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pullRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string feedid = 1;
  int feedid_size() const;
  void clear_feedid();
  static const int kFeedidFieldNumber = 1;
  const std::string& feedid(int index) const;
  std::string* mutable_feedid(int index);
  void set_feedid(int index, const std::string& value);
  void set_feedid(int index, std::string&& value);
  void set_feedid(int index, const char* value);
  void set_feedid(int index, const char* value, size_t size);
  std::string* add_feedid();
  void add_feedid(const std::string& value);
  void add_feedid(std::string&& value);
  void add_feedid(const char* value);
  void add_feedid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& feedid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_feedid();

  // @@protoc_insertion_point(class_scope:mifan.pullRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> feedid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoRecommend_2eproto;
};
// -------------------------------------------------------------------

class pushReq_feedInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pushReq.feedInfo) */ {
 public:
  pushReq_feedInfo();
  virtual ~pushReq_feedInfo();

  pushReq_feedInfo(const pushReq_feedInfo& from);
  pushReq_feedInfo(pushReq_feedInfo&& from) noexcept
    : pushReq_feedInfo() {
    *this = ::std::move(from);
  }

  inline pushReq_feedInfo& operator=(const pushReq_feedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline pushReq_feedInfo& operator=(pushReq_feedInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pushReq_feedInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pushReq_feedInfo* internal_default_instance() {
    return reinterpret_cast<const pushReq_feedInfo*>(
               &_pushReq_feedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(pushReq_feedInfo* other);
  friend void swap(pushReq_feedInfo& a, pushReq_feedInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pushReq_feedInfo* New() const final {
    return CreateMaybeMessage<pushReq_feedInfo>(nullptr);
  }

  pushReq_feedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pushReq_feedInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pushReq_feedInfo& from);
  void MergeFrom(const pushReq_feedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pushReq_feedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pushReq.feedInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string feedid = 1;
  void clear_feedid();
  static const int kFeedidFieldNumber = 1;
  const std::string& feedid() const;
  void set_feedid(const std::string& value);
  void set_feedid(std::string&& value);
  void set_feedid(const char* value);
  void set_feedid(const char* value, size_t size);
  std::string* mutable_feedid();
  std::string* release_feedid();
  void set_allocated_feedid(std::string* feedid);

  // int32 score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pushReq.feedInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feedid_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoRecommend_2eproto;
};
// -------------------------------------------------------------------

class pushReq :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pushReq) */ {
 public:
  pushReq();
  virtual ~pushReq();

  pushReq(const pushReq& from);
  pushReq(pushReq&& from) noexcept
    : pushReq() {
    *this = ::std::move(from);
  }

  inline pushReq& operator=(const pushReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline pushReq& operator=(pushReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pushReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pushReq* internal_default_instance() {
    return reinterpret_cast<const pushReq*>(
               &_pushReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(pushReq* other);
  friend void swap(pushReq& a, pushReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pushReq* New() const final {
    return CreateMaybeMessage<pushReq>(nullptr);
  }

  pushReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pushReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pushReq& from);
  void MergeFrom(const pushReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pushReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pushReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef pushReq_feedInfo feedInfo;

  // accessors -------------------------------------------------------

  // repeated .mifan.pushReq.feedInfo info = 3;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  ::mifan::pushReq_feedInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pushReq_feedInfo >*
      mutable_info();
  const ::mifan::pushReq_feedInfo& info(int index) const;
  ::mifan::pushReq_feedInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pushReq_feedInfo >&
      info() const;

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pushReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pushReq_feedInfo > info_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoRecommend_2eproto;
};
// -------------------------------------------------------------------

class noteRecommendAlarm :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.noteRecommendAlarm) */ {
 public:
  noteRecommendAlarm();
  virtual ~noteRecommendAlarm();

  noteRecommendAlarm(const noteRecommendAlarm& from);
  noteRecommendAlarm(noteRecommendAlarm&& from) noexcept
    : noteRecommendAlarm() {
    *this = ::std::move(from);
  }

  inline noteRecommendAlarm& operator=(const noteRecommendAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline noteRecommendAlarm& operator=(noteRecommendAlarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const noteRecommendAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const noteRecommendAlarm* internal_default_instance() {
    return reinterpret_cast<const noteRecommendAlarm*>(
               &_noteRecommendAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(noteRecommendAlarm* other);
  friend void swap(noteRecommendAlarm& a, noteRecommendAlarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline noteRecommendAlarm* New() const final {
    return CreateMaybeMessage<noteRecommendAlarm>(nullptr);
  }

  noteRecommendAlarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<noteRecommendAlarm>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const noteRecommendAlarm& from);
  void MergeFrom(const noteRecommendAlarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(noteRecommendAlarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.noteRecommendAlarm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.noteRecommendAlarm)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoRecommend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pullReq

// int32 count = 1;
inline void pullReq::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pullReq::count() const {
  // @@protoc_insertion_point(field_get:mifan.pullReq.count)
  return count_;
}
inline void pullReq::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:mifan.pullReq.count)
}

// -------------------------------------------------------------------

// pullRes

// repeated string feedid = 1;
inline int pullRes::feedid_size() const {
  return feedid_.size();
}
inline void pullRes::clear_feedid() {
  feedid_.Clear();
}
inline const std::string& pullRes::feedid(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pullRes.feedid)
  return feedid_.Get(index);
}
inline std::string* pullRes::mutable_feedid(int index) {
  // @@protoc_insertion_point(field_mutable:mifan.pullRes.feedid)
  return feedid_.Mutable(index);
}
inline void pullRes::set_feedid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mifan.pullRes.feedid)
  feedid_.Mutable(index)->assign(value);
}
inline void pullRes::set_feedid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mifan.pullRes.feedid)
  feedid_.Mutable(index)->assign(std::move(value));
}
inline void pullRes::set_feedid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  feedid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mifan.pullRes.feedid)
}
inline void pullRes::set_feedid(int index, const char* value, size_t size) {
  feedid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mifan.pullRes.feedid)
}
inline std::string* pullRes::add_feedid() {
  // @@protoc_insertion_point(field_add_mutable:mifan.pullRes.feedid)
  return feedid_.Add();
}
inline void pullRes::add_feedid(const std::string& value) {
  feedid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mifan.pullRes.feedid)
}
inline void pullRes::add_feedid(std::string&& value) {
  feedid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mifan.pullRes.feedid)
}
inline void pullRes::add_feedid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  feedid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mifan.pullRes.feedid)
}
inline void pullRes::add_feedid(const char* value, size_t size) {
  feedid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mifan.pullRes.feedid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
pullRes::feedid() const {
  // @@protoc_insertion_point(field_list:mifan.pullRes.feedid)
  return feedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
pullRes::mutable_feedid() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pullRes.feedid)
  return &feedid_;
}

// -------------------------------------------------------------------

// pushReq_feedInfo

// string feedid = 1;
inline void pushReq_feedInfo::clear_feedid() {
  feedid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& pushReq_feedInfo::feedid() const {
  // @@protoc_insertion_point(field_get:mifan.pushReq.feedInfo.feedid)
  return feedid_.GetNoArena();
}
inline void pushReq_feedInfo::set_feedid(const std::string& value) {
  
  feedid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mifan.pushReq.feedInfo.feedid)
}
inline void pushReq_feedInfo::set_feedid(std::string&& value) {
  
  feedid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifan.pushReq.feedInfo.feedid)
}
inline void pushReq_feedInfo::set_feedid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feedid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifan.pushReq.feedInfo.feedid)
}
inline void pushReq_feedInfo::set_feedid(const char* value, size_t size) {
  
  feedid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifan.pushReq.feedInfo.feedid)
}
inline std::string* pushReq_feedInfo::mutable_feedid() {
  
  // @@protoc_insertion_point(field_mutable:mifan.pushReq.feedInfo.feedid)
  return feedid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pushReq_feedInfo::release_feedid() {
  // @@protoc_insertion_point(field_release:mifan.pushReq.feedInfo.feedid)
  
  return feedid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pushReq_feedInfo::set_allocated_feedid(std::string* feedid) {
  if (feedid != nullptr) {
    
  } else {
    
  }
  feedid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feedid);
  // @@protoc_insertion_point(field_set_allocated:mifan.pushReq.feedInfo.feedid)
}

// int32 score = 2;
inline void pushReq_feedInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pushReq_feedInfo::score() const {
  // @@protoc_insertion_point(field_get:mifan.pushReq.feedInfo.score)
  return score_;
}
inline void pushReq_feedInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:mifan.pushReq.feedInfo.score)
}

// -------------------------------------------------------------------

// pushReq

// int32 userid = 1;
inline void pushReq::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pushReq::userid() const {
  // @@protoc_insertion_point(field_get:mifan.pushReq.userid)
  return userid_;
}
inline void pushReq::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:mifan.pushReq.userid)
}

// int32 index = 2;
inline void pushReq::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pushReq::index() const {
  // @@protoc_insertion_point(field_get:mifan.pushReq.index)
  return index_;
}
inline void pushReq::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:mifan.pushReq.index)
}

// repeated .mifan.pushReq.feedInfo info = 3;
inline int pushReq::info_size() const {
  return info_.size();
}
inline void pushReq::clear_info() {
  info_.Clear();
}
inline ::mifan::pushReq_feedInfo* pushReq::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:mifan.pushReq.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pushReq_feedInfo >*
pushReq::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pushReq.info)
  return &info_;
}
inline const ::mifan::pushReq_feedInfo& pushReq::info(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pushReq.info)
  return info_.Get(index);
}
inline ::mifan::pushReq_feedInfo* pushReq::add_info() {
  // @@protoc_insertion_point(field_add:mifan.pushReq.info)
  return info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pushReq_feedInfo >&
pushReq::info() const {
  // @@protoc_insertion_point(field_list:mifan.pushReq.info)
  return info_;
}

// -------------------------------------------------------------------

// noteRecommendAlarm

// int32 userid = 1;
inline void noteRecommendAlarm::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 noteRecommendAlarm::userid() const {
  // @@protoc_insertion_point(field_get:mifan.noteRecommendAlarm.userid)
  return userid_;
}
inline void noteRecommendAlarm::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:mifan.noteRecommendAlarm.userid)
}

// int32 count = 2;
inline void noteRecommendAlarm::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 noteRecommendAlarm::count() const {
  // @@protoc_insertion_point(field_get:mifan.noteRecommendAlarm.count)
  return count_;
}
inline void noteRecommendAlarm::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:mifan.noteRecommendAlarm.count)
}

// int32 index = 3;
inline void noteRecommendAlarm::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 noteRecommendAlarm::index() const {
  // @@protoc_insertion_point(field_get:mifan.noteRecommendAlarm.index)
  return index_;
}
inline void noteRecommendAlarm::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:mifan.noteRecommendAlarm.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mifan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protoRecommend_2eproto
