// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgCheck.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imgCheck_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imgCheck_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imgCheck_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_imgCheck_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace mifan {
class imgPopResp;
class imgPopRespDefaultTypeInternal;
extern imgPopRespDefaultTypeInternal _imgPopResp_default_instance_;
class imgPopRqst;
class imgPopRqstDefaultTypeInternal;
extern imgPopRqstDefaultTypeInternal _imgPopRqst_default_instance_;
class imgPush;
class imgPushDefaultTypeInternal;
extern imgPushDefaultTypeInternal _imgPush_default_instance_;
}  // namespace mifan
PROTOBUF_NAMESPACE_OPEN
template<> ::mifan::imgPopResp* Arena::CreateMaybeMessage<::mifan::imgPopResp>(Arena*);
template<> ::mifan::imgPopRqst* Arena::CreateMaybeMessage<::mifan::imgPopRqst>(Arena*);
template<> ::mifan::imgPush* Arena::CreateMaybeMessage<::mifan::imgPush>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifan {

// ===================================================================

class imgPush :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.imgPush) */ {
 public:
  imgPush();
  virtual ~imgPush();

  imgPush(const imgPush& from);
  imgPush(imgPush&& from) noexcept
    : imgPush() {
    *this = ::std::move(from);
  }

  inline imgPush& operator=(const imgPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline imgPush& operator=(imgPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const imgPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imgPush* internal_default_instance() {
    return reinterpret_cast<const imgPush*>(
               &_imgPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(imgPush* other);
  friend void swap(imgPush& a, imgPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline imgPush* New() const final {
    return CreateMaybeMessage<imgPush>(nullptr);
  }

  imgPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imgPush>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const imgPush& from);
  void MergeFrom(const imgPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(imgPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.imgPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string info = 2;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // bool retry = 1;
  void clear_retry();
  static const int kRetryFieldNumber = 1;
  bool retry() const;
  void set_retry(bool value);

  // @@protoc_insertion_point(class_scope:mifan.imgPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  bool retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imgCheck_2eproto;
};
// -------------------------------------------------------------------

class imgPopRqst :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.imgPopRqst) */ {
 public:
  imgPopRqst();
  virtual ~imgPopRqst();

  imgPopRqst(const imgPopRqst& from);
  imgPopRqst(imgPopRqst&& from) noexcept
    : imgPopRqst() {
    *this = ::std::move(from);
  }

  inline imgPopRqst& operator=(const imgPopRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline imgPopRqst& operator=(imgPopRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const imgPopRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imgPopRqst* internal_default_instance() {
    return reinterpret_cast<const imgPopRqst*>(
               &_imgPopRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(imgPopRqst* other);
  friend void swap(imgPopRqst& a, imgPopRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline imgPopRqst* New() const final {
    return CreateMaybeMessage<imgPopRqst>(nullptr);
  }

  imgPopRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imgPopRqst>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const imgPopRqst& from);
  void MergeFrom(const imgPopRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(imgPopRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.imgPopRqst";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool retry = 1;
  void clear_retry();
  static const int kRetryFieldNumber = 1;
  bool retry() const;
  void set_retry(bool value);

  // @@protoc_insertion_point(class_scope:mifan.imgPopRqst)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imgCheck_2eproto;
};
// -------------------------------------------------------------------

class imgPopResp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.imgPopResp) */ {
 public:
  imgPopResp();
  virtual ~imgPopResp();

  imgPopResp(const imgPopResp& from);
  imgPopResp(imgPopResp&& from) noexcept
    : imgPopResp() {
    *this = ::std::move(from);
  }

  inline imgPopResp& operator=(const imgPopResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline imgPopResp& operator=(imgPopResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const imgPopResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imgPopResp* internal_default_instance() {
    return reinterpret_cast<const imgPopResp*>(
               &_imgPopResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(imgPopResp* other);
  friend void swap(imgPopResp& a, imgPopResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline imgPopResp* New() const final {
    return CreateMaybeMessage<imgPopResp>(nullptr);
  }

  imgPopResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imgPopResp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const imgPopResp& from);
  void MergeFrom(const imgPopResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(imgPopResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.imgPopResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string info = 1;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // @@protoc_insertion_point(class_scope:mifan.imgPopResp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imgCheck_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// imgPush

// bool retry = 1;
inline void imgPush::clear_retry() {
  retry_ = false;
}
inline bool imgPush::retry() const {
  // @@protoc_insertion_point(field_get:mifan.imgPush.retry)
  return retry_;
}
inline void imgPush::set_retry(bool value) {
  
  retry_ = value;
  // @@protoc_insertion_point(field_set:mifan.imgPush.retry)
}

// string info = 2;
inline void imgPush::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& imgPush::info() const {
  // @@protoc_insertion_point(field_get:mifan.imgPush.info)
  return info_.GetNoArena();
}
inline void imgPush::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mifan.imgPush.info)
}
inline void imgPush::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifan.imgPush.info)
}
inline void imgPush::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifan.imgPush.info)
}
inline void imgPush::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifan.imgPush.info)
}
inline std::string* imgPush::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:mifan.imgPush.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* imgPush::release_info() {
  // @@protoc_insertion_point(field_release:mifan.imgPush.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void imgPush::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:mifan.imgPush.info)
}

// -------------------------------------------------------------------

// imgPopRqst

// bool retry = 1;
inline void imgPopRqst::clear_retry() {
  retry_ = false;
}
inline bool imgPopRqst::retry() const {
  // @@protoc_insertion_point(field_get:mifan.imgPopRqst.retry)
  return retry_;
}
inline void imgPopRqst::set_retry(bool value) {
  
  retry_ = value;
  // @@protoc_insertion_point(field_set:mifan.imgPopRqst.retry)
}

// -------------------------------------------------------------------

// imgPopResp

// string info = 1;
inline void imgPopResp::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& imgPopResp::info() const {
  // @@protoc_insertion_point(field_get:mifan.imgPopResp.info)
  return info_.GetNoArena();
}
inline void imgPopResp::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mifan.imgPopResp.info)
}
inline void imgPopResp::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifan.imgPopResp.info)
}
inline void imgPopResp::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifan.imgPopResp.info)
}
inline void imgPopResp::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifan.imgPopResp.info)
}
inline std::string* imgPopResp::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:mifan.imgPopResp.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* imgPopResp::release_info() {
  // @@protoc_insertion_point(field_release:mifan.imgPopResp.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void imgPopResp::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:mifan.imgPopResp.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mifan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imgCheck_2eproto
