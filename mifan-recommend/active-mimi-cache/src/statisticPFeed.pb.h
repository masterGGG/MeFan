// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statisticPFeed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_statisticPFeed_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_statisticPFeed_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_statisticPFeed_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_statisticPFeed_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace mifan {
class pCommonStat;
class pCommonStatDefaultTypeInternal;
extern pCommonStatDefaultTypeInternal _pCommonStat_default_instance_;
class pQueryStat;
class pQueryStatDefaultTypeInternal;
extern pQueryStatDefaultTypeInternal _pQueryStat_default_instance_;
class pQueryStat_detail;
class pQueryStat_detailDefaultTypeInternal;
extern pQueryStat_detailDefaultTypeInternal _pQueryStat_detail_default_instance_;
class pUpdateStat;
class pUpdateStatDefaultTypeInternal;
extern pUpdateStatDefaultTypeInternal _pUpdateStat_default_instance_;
}  // namespace mifan
PROTOBUF_NAMESPACE_OPEN
template<> ::mifan::pCommonStat* Arena::CreateMaybeMessage<::mifan::pCommonStat>(Arena*);
template<> ::mifan::pQueryStat* Arena::CreateMaybeMessage<::mifan::pQueryStat>(Arena*);
template<> ::mifan::pQueryStat_detail* Arena::CreateMaybeMessage<::mifan::pQueryStat_detail>(Arena*);
template<> ::mifan::pUpdateStat* Arena::CreateMaybeMessage<::mifan::pUpdateStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifan {

// ===================================================================

class pUpdateStat :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pUpdateStat) */ {
 public:
  pUpdateStat();
  virtual ~pUpdateStat();

  pUpdateStat(const pUpdateStat& from);
  pUpdateStat(pUpdateStat&& from) noexcept
    : pUpdateStat() {
    *this = ::std::move(from);
  }

  inline pUpdateStat& operator=(const pUpdateStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline pUpdateStat& operator=(pUpdateStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pUpdateStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pUpdateStat* internal_default_instance() {
    return reinterpret_cast<const pUpdateStat*>(
               &_pUpdateStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pUpdateStat* other);
  friend void swap(pUpdateStat& a, pUpdateStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pUpdateStat* New() const final {
    return CreateMaybeMessage<pUpdateStat>(nullptr);
  }

  pUpdateStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pUpdateStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pUpdateStat& from);
  void MergeFrom(const pUpdateStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pUpdateStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pUpdateStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 mimi = 2;
  int mimi_size() const;
  void clear_mimi();
  static const int kMimiFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mimi(int index) const;
  void set_mimi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mimi(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mimi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mimi();

  // int32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pUpdateStat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mimi_;
  mutable std::atomic<int> _mimi_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_statisticPFeed_2eproto;
};
// -------------------------------------------------------------------

class pCommonStat :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pCommonStat) */ {
 public:
  pCommonStat();
  virtual ~pCommonStat();

  pCommonStat(const pCommonStat& from);
  pCommonStat(pCommonStat&& from) noexcept
    : pCommonStat() {
    *this = ::std::move(from);
  }

  inline pCommonStat& operator=(const pCommonStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline pCommonStat& operator=(pCommonStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pCommonStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pCommonStat* internal_default_instance() {
    return reinterpret_cast<const pCommonStat*>(
               &_pCommonStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(pCommonStat* other);
  friend void swap(pCommonStat& a, pCommonStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pCommonStat* New() const final {
    return CreateMaybeMessage<pCommonStat>(nullptr);
  }

  pCommonStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pCommonStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pCommonStat& from);
  void MergeFrom(const pCommonStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pCommonStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pCommonStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cmd = 1;
  int cmd_size() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd(int index) const;
  void set_cmd(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cmd();

  // @@protoc_insertion_point(class_scope:mifan.pCommonStat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cmd_;
  mutable std::atomic<int> _cmd_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_statisticPFeed_2eproto;
};
// -------------------------------------------------------------------

class pQueryStat_detail :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pQueryStat.detail) */ {
 public:
  pQueryStat_detail();
  virtual ~pQueryStat_detail();

  pQueryStat_detail(const pQueryStat_detail& from);
  pQueryStat_detail(pQueryStat_detail&& from) noexcept
    : pQueryStat_detail() {
    *this = ::std::move(from);
  }

  inline pQueryStat_detail& operator=(const pQueryStat_detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline pQueryStat_detail& operator=(pQueryStat_detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pQueryStat_detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pQueryStat_detail* internal_default_instance() {
    return reinterpret_cast<const pQueryStat_detail*>(
               &_pQueryStat_detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(pQueryStat_detail* other);
  friend void swap(pQueryStat_detail& a, pQueryStat_detail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pQueryStat_detail* New() const final {
    return CreateMaybeMessage<pQueryStat_detail>(nullptr);
  }

  pQueryStat_detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pQueryStat_detail>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pQueryStat_detail& from);
  void MergeFrom(const pQueryStat_detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pQueryStat_detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pQueryStat.detail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 mimi = 3;
  int mimi_size() const;
  void clear_mimi();
  static const int kMimiFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mimi(int index) const;
  void set_mimi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mimi(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mimi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mimi();

  // int32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cnt = 2;
  void clear_cnt();
  static const int kCntFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt() const;
  void set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pQueryStat.detail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mimi_;
  mutable std::atomic<int> _mimi_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_statisticPFeed_2eproto;
};
// -------------------------------------------------------------------

class pQueryStat :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mifan.pQueryStat) */ {
 public:
  pQueryStat();
  virtual ~pQueryStat();

  pQueryStat(const pQueryStat& from);
  pQueryStat(pQueryStat&& from) noexcept
    : pQueryStat() {
    *this = ::std::move(from);
  }

  inline pQueryStat& operator=(const pQueryStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline pQueryStat& operator=(pQueryStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const pQueryStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pQueryStat* internal_default_instance() {
    return reinterpret_cast<const pQueryStat*>(
               &_pQueryStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(pQueryStat* other);
  friend void swap(pQueryStat& a, pQueryStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pQueryStat* New() const final {
    return CreateMaybeMessage<pQueryStat>(nullptr);
  }

  pQueryStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pQueryStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const pQueryStat& from);
  void MergeFrom(const pQueryStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pQueryStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifan.pQueryStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef pQueryStat_detail detail;

  // accessors -------------------------------------------------------

  // repeated .mifan.pQueryStat.detail list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::mifan::pQueryStat_detail* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pQueryStat_detail >*
      mutable_list();
  const ::mifan::pQueryStat_detail& list(int index) const;
  ::mifan::pQueryStat_detail* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pQueryStat_detail >&
      list() const;

  // int32 cnt = 2;
  void clear_cnt();
  static const int kCntFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt() const;
  void set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mifan.pQueryStat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pQueryStat_detail > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_statisticPFeed_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pUpdateStat

// int32 cmd = 1;
inline void pUpdateStat::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pUpdateStat::cmd() const {
  // @@protoc_insertion_point(field_get:mifan.pUpdateStat.cmd)
  return cmd_;
}
inline void pUpdateStat::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:mifan.pUpdateStat.cmd)
}

// repeated int32 mimi = 2;
inline int pUpdateStat::mimi_size() const {
  return mimi_.size();
}
inline void pUpdateStat::clear_mimi() {
  mimi_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pUpdateStat::mimi(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pUpdateStat.mimi)
  return mimi_.Get(index);
}
inline void pUpdateStat::set_mimi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mimi_.Set(index, value);
  // @@protoc_insertion_point(field_set:mifan.pUpdateStat.mimi)
}
inline void pUpdateStat::add_mimi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mimi_.Add(value);
  // @@protoc_insertion_point(field_add:mifan.pUpdateStat.mimi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
pUpdateStat::mimi() const {
  // @@protoc_insertion_point(field_list:mifan.pUpdateStat.mimi)
  return mimi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
pUpdateStat::mutable_mimi() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pUpdateStat.mimi)
  return &mimi_;
}

// -------------------------------------------------------------------

// pCommonStat

// repeated int32 cmd = 1;
inline int pCommonStat::cmd_size() const {
  return cmd_.size();
}
inline void pCommonStat::clear_cmd() {
  cmd_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pCommonStat::cmd(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pCommonStat.cmd)
  return cmd_.Get(index);
}
inline void pCommonStat::set_cmd(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cmd_.Set(index, value);
  // @@protoc_insertion_point(field_set:mifan.pCommonStat.cmd)
}
inline void pCommonStat::add_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cmd_.Add(value);
  // @@protoc_insertion_point(field_add:mifan.pCommonStat.cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
pCommonStat::cmd() const {
  // @@protoc_insertion_point(field_list:mifan.pCommonStat.cmd)
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
pCommonStat::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pCommonStat.cmd)
  return &cmd_;
}

// -------------------------------------------------------------------

// pQueryStat_detail

// int32 cmd = 1;
inline void pQueryStat_detail::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pQueryStat_detail::cmd() const {
  // @@protoc_insertion_point(field_get:mifan.pQueryStat.detail.cmd)
  return cmd_;
}
inline void pQueryStat_detail::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:mifan.pQueryStat.detail.cmd)
}

// int32 cnt = 2;
inline void pQueryStat_detail::clear_cnt() {
  cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pQueryStat_detail::cnt() const {
  // @@protoc_insertion_point(field_get:mifan.pQueryStat.detail.cnt)
  return cnt_;
}
inline void pQueryStat_detail::set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cnt_ = value;
  // @@protoc_insertion_point(field_set:mifan.pQueryStat.detail.cnt)
}

// repeated int32 mimi = 3;
inline int pQueryStat_detail::mimi_size() const {
  return mimi_.size();
}
inline void pQueryStat_detail::clear_mimi() {
  mimi_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pQueryStat_detail::mimi(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pQueryStat.detail.mimi)
  return mimi_.Get(index);
}
inline void pQueryStat_detail::set_mimi(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mimi_.Set(index, value);
  // @@protoc_insertion_point(field_set:mifan.pQueryStat.detail.mimi)
}
inline void pQueryStat_detail::add_mimi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mimi_.Add(value);
  // @@protoc_insertion_point(field_add:mifan.pQueryStat.detail.mimi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
pQueryStat_detail::mimi() const {
  // @@protoc_insertion_point(field_list:mifan.pQueryStat.detail.mimi)
  return mimi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
pQueryStat_detail::mutable_mimi() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pQueryStat.detail.mimi)
  return &mimi_;
}

// -------------------------------------------------------------------

// pQueryStat

// repeated .mifan.pQueryStat.detail list = 1;
inline int pQueryStat::list_size() const {
  return list_.size();
}
inline void pQueryStat::clear_list() {
  list_.Clear();
}
inline ::mifan::pQueryStat_detail* pQueryStat::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:mifan.pQueryStat.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pQueryStat_detail >*
pQueryStat::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:mifan.pQueryStat.list)
  return &list_;
}
inline const ::mifan::pQueryStat_detail& pQueryStat::list(int index) const {
  // @@protoc_insertion_point(field_get:mifan.pQueryStat.list)
  return list_.Get(index);
}
inline ::mifan::pQueryStat_detail* pQueryStat::add_list() {
  // @@protoc_insertion_point(field_add:mifan.pQueryStat.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifan::pQueryStat_detail >&
pQueryStat::list() const {
  // @@protoc_insertion_point(field_list:mifan.pQueryStat.list)
  return list_;
}

// int32 cnt = 2;
inline void pQueryStat::clear_cnt() {
  cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pQueryStat::cnt() const {
  // @@protoc_insertion_point(field_get:mifan.pQueryStat.cnt)
  return cnt_;
}
inline void pQueryStat::set_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cnt_ = value;
  // @@protoc_insertion_point(field_set:mifan.pQueryStat.cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mifan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_statisticPFeed_2eproto
